// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataset {

namespace {

const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageEntity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataset_2eproto() {
  protobuf_AddDesc_dataset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataset.proto");
  GOOGLE_CHECK(file != NULL);
  Block_descriptor_ = file->message_type(0);
  static const int Block_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, text_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  BlockList_descriptor_ = file->message_type(1);
  static const int BlockList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, blocks_),
  };
  BlockList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockList_descriptor_,
      BlockList::default_instance_,
      BlockList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockList));
  ImageEntity_descriptor_ = file->message_type(2);
  static const int ImageEntity_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, recog_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, truth_text_),
  };
  ImageEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageEntity_descriptor_,
      ImageEntity::default_instance_,
      ImageEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageEntity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockList_descriptor_, &BlockList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageEntity_descriptor_, &ImageEntity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataset_2eproto() {
  delete Block::default_instance_;
  delete Block_reflection_;
  delete BlockList::default_instance_;
  delete BlockList_reflection_;
  delete ImageEntity::default_instance_;
  delete ImageEntity_reflection_;
}

void protobuf_AddDesc_dataset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdataset.proto\022\007dataset\"S\n\005Block\022\r\n\002x1\030"
    "\001 \002(\005:\0010\022\r\n\002y1\030\002 \002(\005:\0010\022\r\n\002x2\030\003 \002(\005:\0010\022\r"
    "\n\002y2\030\004 \002(\005:\0010\022\016\n\004text\030\005 \001(\t:\000\"+\n\tBlockLi"
    "st\022\036\n\006blocks\030\001 \003(\0132\016.dataset.Block\"\212\001\n\013I"
    "mageEntity\022\020\n\010channels\030\001 \002(\005\022\016\n\006height\030\002"
    " \002(\005\022\r\n\005width\030\003 \002(\005\022\014\n\004data\030\004 \002(\014\022\024\n\nrec"
    "og_text\030\005 \001(\t:\000\022\020\n\005score\030\006 \001(\002:\0010\022\024\n\ntru"
    "th_text\030\007 \001(\t:\000", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataset.proto", &protobuf_RegisterTypes);
  Block::default_instance_ = new Block();
  BlockList::default_instance_ = new BlockList();
  ImageEntity::default_instance_ = new ImageEntity();
  Block::default_instance_->InitAsDefaultInstance();
  BlockList::default_instance_->InitAsDefaultInstance();
  ImageEntity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataset_2eproto {
  StaticDescriptorInitializer_dataset_2eproto() {
    protobuf_AddDesc_dataset_2eproto();
  }
} static_descriptor_initializer_dataset_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Block::kX1FieldNumber;
const int Block::kY1FieldNumber;
const int Block::kX2FieldNumber;
const int Block::kY2FieldNumber;
const int Block::kTextFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    y1_ = 0;
    x2_ = 0;
    y2_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y1;
        break;
      }

      // required int32 y1 = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x2;
        break;
      }

      // required int32 x2 = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y2;
        break;
      }

      // required int32 y2 = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional string text = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x1 = 1 [default = 0];
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // required int32 y1 = 2 [default = 0];
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // required int32 x2 = 3 [default = 0];
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // required int32 y2 = 4 [default = 0];
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  // optional string text = 5 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x1 = 1 [default = 0];
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // required int32 y1 = 2 [default = 0];
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // required int32 x2 = 3 [default = 0];
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // required int32 y2 = 4 [default = 0];
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  // optional string text = 5 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x1 = 1 [default = 0];
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // required int32 y1 = 2 [default = 0];
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // required int32 x2 = 3 [default = 0];
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }

    // required int32 y2 = 4 [default = 0];
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }

    // optional string text = 5 [default = ""];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockList::kBlocksFieldNumber;
#endif  // !_MSC_VER

BlockList::BlockList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockList::InitAsDefaultInstance() {
}

BlockList::BlockList(const BlockList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockList::~BlockList() {
  SharedDtor();
}

void BlockList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockList_descriptor_;
}

const BlockList& BlockList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

BlockList* BlockList::default_instance_ = NULL;

BlockList* BlockList::New() const {
  return new BlockList;
}

void BlockList::Clear() {
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dataset.Block blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dataset.Block blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dataset.Block blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockList::ByteSize() const {
  int total_size = 0;

  // repeated .dataset.Block blocks = 1;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockList::MergeFrom(const BlockList& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockList::CopyFrom(const BlockList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockList::IsInitialized() const {

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void BlockList::Swap(BlockList* other) {
  if (other != this) {
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockList_descriptor_;
  metadata.reflection = BlockList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageEntity::kChannelsFieldNumber;
const int ImageEntity::kHeightFieldNumber;
const int ImageEntity::kWidthFieldNumber;
const int ImageEntity::kDataFieldNumber;
const int ImageEntity::kRecogTextFieldNumber;
const int ImageEntity::kScoreFieldNumber;
const int ImageEntity::kTruthTextFieldNumber;
#endif  // !_MSC_VER

ImageEntity::ImageEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageEntity::InitAsDefaultInstance() {
}

ImageEntity::ImageEntity(const ImageEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageEntity::SharedCtor() {
  _cached_size_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recog_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  truth_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageEntity::~ImageEntity() {
  SharedDtor();
}

void ImageEntity::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (recog_text_ != &::google::protobuf::internal::kEmptyString) {
    delete recog_text_;
  }
  if (truth_text_ != &::google::protobuf::internal::kEmptyString) {
    delete truth_text_;
  }
  if (this != default_instance_) {
  }
}

void ImageEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageEntity_descriptor_;
}

const ImageEntity& ImageEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataset_2eproto();
  return *default_instance_;
}

ImageEntity* ImageEntity::default_instance_ = NULL;

ImageEntity* ImageEntity::New() const {
  return new ImageEntity;
}

void ImageEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channels_ = 0;
    height_ = 0;
    width_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_recog_text()) {
      if (recog_text_ != &::google::protobuf::internal::kEmptyString) {
        recog_text_->clear();
      }
    }
    score_ = 0;
    if (has_truth_text()) {
      if (truth_text_ != &::google::protobuf::internal::kEmptyString) {
        truth_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recog_text;
        break;
      }

      // optional string recog_text = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recog_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recog_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recog_text().data(), this->recog_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_score;
        break;
      }

      // optional float score = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_truth_text;
        break;
      }

      // optional string truth_text = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_truth_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_truth_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->truth_text().data(), this->truth_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional string recog_text = 5 [default = ""];
  if (has_recog_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recog_text().data(), this->recog_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recog_text(), output);
  }

  // optional float score = 6 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->score(), output);
  }

  // optional string truth_text = 7 [default = ""];
  if (has_truth_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->truth_text().data(), this->truth_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->truth_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional string recog_text = 5 [default = ""];
  if (has_recog_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recog_text().data(), this->recog_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recog_text(), target);
  }

  // optional float score = 6 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->score(), target);
  }

  // optional string truth_text = 7 [default = ""];
  if (has_truth_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->truth_text().data(), this->truth_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->truth_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string recog_text = 5 [default = ""];
    if (has_recog_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recog_text());
    }

    // optional float score = 6 [default = 0];
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional string truth_text = 7 [default = ""];
    if (has_truth_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->truth_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageEntity::MergeFrom(const ImageEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_recog_text()) {
      set_recog_text(from.recog_text());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_truth_text()) {
      set_truth_text(from.truth_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageEntity::CopyFrom(const ImageEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ImageEntity::Swap(ImageEntity* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(data_, other->data_);
    std::swap(recog_text_, other->recog_text_);
    std::swap(score_, other->score_);
    std::swap(truth_text_, other->truth_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageEntity_descriptor_;
  metadata.reflection = ImageEntity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataset

// @@protoc_insertion_point(global_scope)
